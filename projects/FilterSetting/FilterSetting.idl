// FilterSetting.idl : FilterSetting 的 IDL 源
//

// 此文件将由 MIDL 工具处理以
// 产生类型库(FilterSetting.tlb)和封送处理代码。

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(EB9690EC-B4C8-4693-929B-D45C98FD5894),
	dual,
	nonextensible,
	helpstring("IAuthorize Interface"),
	pointer_default(unique)
]
interface IAuthorize : IDispatch{
	[id(1), helpstring("Method checkPassword")]		HRESULT checkPassword([in] BSTR password, [out,retval] VARIANT_BOOL* bSuccess);
	[id(2), helpstring("Method setPassword")]		HRESULT changePassword([in] BSTR password, [in] BSTR oldPassword, [out,retval] VARIANT_BOOL* bSuccess);
};
[
	object,
	uuid(A6CAAAA4-0F78-47DD-8DF1-EAE712C24889),
	dual,
	nonextensible,
	helpstring("IEyecare Interface"),
	pointer_default(unique)
]
interface IEyecare : IDispatch{
	[id(1),  helpstring("Method setPassword")]		HRESULT setPassword([in] BSTR password);
	[id(2),  helpstring("Method setEyecareTime")]	HRESULT setEyecareTime([in] LONG mintues);
	[id(3),  helpstring("Method setEnterTime")]		HRESULT setEnterTime([in] LONG mintues);
	[id(5),  helpstring("Method getEyecareTime")]	HRESULT getEyecareTime([out,retval] LONG* mintues);
	[id(6),  helpstring("Method getEnterTime")]		HRESULT getEnterTime([out,retval] LONG* second);
	[id(7),  helpstring("Method getTimeLeft")]		HRESULT getTimeLeft([out,retval] LONG* second);
	[id(8),  helpstring("Method getState")]			HRESULT getState([out,retval] LONG* state);
	[id(9),  helpstring("Method endEyecare")]		HRESULT endEyecare([in] BSTR password,  [out,retval] VARIANT_BOOL* bSuccess);
	[id(10), helpstring("Method trySwitch")]		HRESULT trySwitch([out,retval] LONG* state);
	[id(12), helpstring("Method setTermMode")]		HRESULT setTermMode([in] LONG mode);
	[id(13), helpstring("Method getTermMode")]		HRESULT getTermMode([out,retval] LONG* mode);
	[id(14), helpstring("Method enableEyecare")]	HRESULT enableEyecare([in] VARIANT_BOOL enabled);
};
[
	object,
	uuid(00A9583E-A2E7-4EB4-AF45-6FFC8BEDC701),
	dual,
	nonextensible,
	helpstring("IAppSetting  Interface"),
	pointer_default(unique)
]
interface IAppSetting : IDispatch{
	[id(1), helpstring("Method setHotkey")]				 HRESULT setHotkey([in] USHORT wVirtualKeyCode, [in] USHORT wModifiers, [in] LONG type, [out,retval] VARIANT_BOOL* bSuccess);
	[id(3), helpstring("Method GetInstallPath")]		 HRESULT GetInstallPath([out,retval] BSTR* path);
	[id(4), helpstring("Method switchModel")]			 HRESULT switchModel([in] VARIANT_BOOL bParent, [in] BSTR pwd, [out,retval] VARIANT_BOOL* bSucc);
	[propget, id(5), helpstring("Property ParentModel")] HRESULT ParentModel([out, retval] VARIANT_BOOL* pVal);
	[id(6), helpstring("Method setTimeoutValue")]		 HRESULT setTimeoutValue([in] LONG seconds);
	[propget, id(7), helpstring("Property TimeoutSwitchEnabled")] HRESULT TimeoutSwitchEnabled([out, retval] VARIANT_BOOL* pVal);
	[propput, id(7), helpstring("Property TimeoutSwitchEnabled")] HRESULT TimeoutSwitchEnabled([in] VARIANT_BOOL newVal);
	[propget, id(8), helpstring("Property LefttimeToSwitch")]	  HRESULT LefttimeToSwitch([out, retval] LONG* pVal);
	[id(9), helpstring("Method Registered")] HRESULT Registered([out,retval] VARIANT_BOOL* registeded);
	[id(10), helpstring("Method Register")] HRESULT Register(BSTR bstr, [out,retval] VARIANT_BOOL* bSucc);
};
[
	object,
	uuid(AE3AA2A0-D840-4301-932D-ED450D797CA7),
	dual,
	nonextensible,
	helpstring("IScreenSave  Interface"),
	pointer_default(unique)
]
interface IScreenSave : IDispatch{
	[id(1), helpstring("Method enableScreenSave")]			  HRESULT enableScreenSave([in] VARIANT_BOOL enabled);
	[id(2), helpstring("Method setTimeSpan")]				  HRESULT setTimeSpan([in] LONG seconds);
	[id(3), helpstring("Method isEnabled")]				      HRESULT isEnabled([out,retval] VARIANT_BOOL* enabled);
	[id(4), helpstring("Method ClearCache")]				  HRESULT ClearCache(void);
	[id(5), helpstring("Method setAutoClearTimespan")]		  HRESULT setAutoClearTimespan([in] LONG seconds);
	[propget, id(6), helpstring("Property AutocleanEnabled")] HRESULT AutocleanEnabled([out, retval] VARIANT_BOOL* pVal);
	[propput, id(6), helpstring("Property AutocleanEnabled")] HRESULT AutocleanEnabled([in] VARIANT_BOOL newVal);
};
[
	object,
	uuid(DF30A4AB-53EE-474B-9EF1-9A147904F85B),
	dual,
	nonextensible,
	helpstring("IWebHistoryRecorder interface"),
	pointer_default(unique)
]
interface IWebHistoryRecorder : IDispatch{
	[propget, id(3), helpstring("Attribute RecordPornPages")]	HRESULT RecordPornPages([out, retval] VARIANT_BOOL* pVal);
	[propput, id(3), helpstring("Attribute RecordPornPages")]	HRESULT RecordPornPages([in] VARIANT_BOOL newVal);
	[propget, id(6), helpstring("Attribute RecordAllPage")]			HRESULT RecordAllPages([out, retval] VARIANT_BOOL* pVal);
	[propput, id(6), helpstring("Attribute RecordAllPage")]			HRESULT RecordAllPages([in] VARIANT_BOOL newVal);
	[propget, id(4), helpstring("Attribute RecordPornImage")]	HRESULT RecordPornImage([out, retval] VARIANT_BOOL* pVal);
	[propput, id(4), helpstring("Attribute RecordPornImage")]	HRESULT RecordPornImage([in] VARIANT_BOOL newVal);
	[propget, id(5), helpstring("Attribute RecordAllImage")]		HRESULT RecordAllImage([out, retval] VARIANT_BOOL* pVal);
	[propput, id(5), helpstring("Attribute RecordAllImage")]		HRESULT RecordAllImage([in] VARIANT_BOOL newVal);
	[propget, id(7), helpstring("Attribute recordPornURLs")]		HRESULT RecordPornURLs([out, retval] VARIANT_BOOL* pVal);
	[propput, id(7), helpstring("Attribute recordPornURLs")]		HRESULT RecordPornURLs([in] VARIANT_BOOL newVal);
	[propget, id(8), helpstring("Attribute recordAllURLs")]			HRESULT RecordAllURLs([out, retval] VARIANT_BOOL* pVal);
	[propput, id(8), helpstring("Attribute recordAllURLs")]			HRESULT RecordAllURLs([in] VARIANT_BOOL newVal);
	[propget, id(9), helpstring("Attribute recordAllURLs")]			HRESULT RecordSeachKeyword([out, retval] VARIANT_BOOL* pVal);
	[propput, id(9), helpstring("Attribute recordAllURLs")]			HRESULT RecordSeachKeyword([in] VARIANT_BOOL newVal);
};
[
	object,
	uuid(01B7967C-C4EF-4B1C-9815-B01567AD2D34),
	dual,
	nonextensible,
	helpstring("IDNSSetting Interface"),
	pointer_default(unique)
]
interface IDNSSetting : IDispatch{
	[id(1),  helpstring("method addBlackDNS")]			HRESULT addBlackDNS([in] BSTR dns);
	[id(2),  helpstring("method addWhiteDNS")]			HRESULT addWhiteDNS([in] BSTR dns);
	[id(4),  helpstring("method removeBlackDNS")]		HRESULT removeBlackDNS([in] BSTR blackDNS);
	[id(5),  helpstring("method removeWhiteDNS")]		HRESULT removeWhiteDNS([in] BSTR whiteDNS);
	[id(10), helpstring("method enableWhiteDNSCheck")]  HRESULT enableWhiteDNSCheck([in] VARIANT_BOOL enable);
	[id(11), helpstring("method enableBlackDNSCheck")]  HRESULT enableBlackDNSCheck([in] VARIANT_BOOL enable);
	[id(12), helpstring("method checkDNS")]				HRESULT checkDNS([in] BSTR dns_name, [out,retval] VARIANT_BOOL* passed);
	[id(13), helpstring("Method justEnableWhiteDNS")]	HRESULT justEnableWhiteDNS([in] VARIANT_BOOL enabled);
	[id(14), helpstring("Method isWhiteDNS")] HRESULT isWhiteDNS([in] BSTR dns, [out,retval] VARIANT_BOOL* White);
};
[
	object,
	uuid(89FB4FD4-6795-4BC3-8CF4-52E38C2B9CD3),
	dual,
	nonextensible,
	helpstring("IAccessNetwork Interface"),
	pointer_default(unique)
]
interface IAccessNetwork : IDispatch{
	[id(1), helpstring("Method accessNetwork")]		HRESULT accessNetwork([out,retval] VARIANT_BOOL* bAccessable);
	[id(2), helpstring("Method setBlockTime")]		HRESULT setBlockTime([in] LONG day, [in] LONG hour);
	[id(3), helpstring("Method removeBlockTime")]	HRESULT removeBlockTime([in] LONG day, [in] LONG hour);
};
[
	object,
	uuid(1DB7FB63-E5C2-4C58-9A6A-1A72C63AA185),
	dual,
	nonextensible,
	helpstring("ISearchRule Interface"),
	pointer_default(unique)
]
interface ISearchRule : IDispatch{
	[id(1), helpstring("Method check")]						HRESULT check([in] BSTR seach_word, [in] BSTR host_name, [out,retval] VARIANT_BOOL* pass);
	[id(2), helpstring("Method addBlackSeachword")]			HRESULT addBlackSeachword([in] BSTR seachword);
	[id(3), helpstring("Method enableCheckSeachEngine")]	HRESULT enableCheckSeachEngine(BSTR seachengine, [in] VARIANT_BOOL enabled);
	[id(4), helpstring("Method removeBlackSeachWord")]		HRESULT removeBlackSeachWord([in] BSTR blackword);
};
[
	object,
	uuid(AC224D46-02AF-4BEB-972C-EC290406E619),
	dual,
	nonextensible,
	helpstring("IWebContentCheck interface"),
	pointer_default(unique)
]
interface IWebContentCheck : IDispatch {
	[id(1), helpstring("Method shouldCheck")]		HRESULT shouldCheck([in] LONG type, [out,retval] VARIANT_BOOL* check);
	[id(2), helpstring("Method setCheckScope")]		HRESULT setCheckScope([in] LONG min, [in] LONG max);
	[id(3), helpstring("Method enableCheck")]		HRESULT enableCheck([in] VARIANT_BOOL enabled, [in] LONG type);
	[id(4), helpstring("Method shouldCheckBySize")] HRESULT shouldCheckBySize([in] LONG size, [out,retval] VARIANT_BOOL* check);
	[propget, id(5), helpstring("Peropery ImageCheckTightness")] HRESULT ImageCheckTightness([out, retval] LONG* pVal);
	[propput, id(5), helpstring("Peropery ImageCheckTightness")] HRESULT ImageCheckTightness([in] LONG newVal);
	[id(6), helpstring("Method getCheckScope")] HRESULT getCheckScope([out] LONG* minSize, [out] LONG* maxSize);
};
[
	object,
	uuid(DFD90E3D-0D63-4415-9CF3-EABE3A1FE4E9),
	dual,
	nonextensible,
	helpstring("IWebContentRecord Interface"),
	pointer_default(unique)
]
interface IWebContentRecord : IDispatch{
	[id(1), helpstring("Method SearchKeyword")] HRESULT SearchKeyword([in] BSTR keyword, [in] LONG searchEngine);
	[id(2), helpstring("Method GetFirstSearchKeyword")] HRESULT GetFirstSearchKeyword([out] BSTR* keyword, [out] LONG* times, [out] LONG* searchEngine, [out] LONG* timeHighPart, [out] LONG* timeLowPart);
	[id(3), helpstring("Method GetNextSearchKeyword")] HRESULT GetNextSearchKeyword([in]BSTR  cur, [out] BSTR* keyword, [out] LONG* times, [out] LONG* searchEngine, [out] LONG* timeHighPart, [out] LONG* timeLowPart);
};
[
	uuid(42F932B5-F5CB-4F0D-8925-1B6BE5FECD1B),
	version(1.0),
	helpstring("FilterSetting 1.0 ClassLibrary")
]

library FilterSettingLib {
	importlib("stdole2.tlb");

	[
		uuid(20A0E336-ABED-456D-A000-E6B110A86F3B),
		helpstring("Authorize Class")
	]
	coclass Authorize
	{
		[default] interface IAuthorize;
	};
	[
		uuid(E81DB199-CB22-4EB4-BF79-A5CCA673AF01),
		helpstring("Eyecare Class")
	]
	coclass Eyecare
	{
		[default] interface IEyecare;
	};
	[
		uuid(40B3A4B6-7DC1-4DE0-BDC3-8D519F0AD7B6),
		helpstring("AppSetting Class")
	]
	coclass AppSetting
	{
		[default] interface IAppSetting;
	};
	[
		uuid(6CCC382B-10BC-4F2F-AC82-E79EC9CDA172),
		helpstring("ScreenSave Class")
	]
	coclass ScreenSave
	{
		[default] interface IScreenSave;
	};
	[
		uuid(69E64239-C5EA-4B59-B114-05D8D2FA424E),
		helpstring("WebHistoryRecorder Class")
	]
	coclass WebHistoryRecorder
	{
		[default] interface IWebHistoryRecorder;
	};
	[
		uuid(E6CE8506-DB48-4D91-96AD-851DAB87207C),
		helpstring("DNSSetting Class")
	]
	coclass DNSSetting
	{
		[default] interface IDNSSetting;
	};
	[
		uuid(78C9ED29-AF1B-470E-B9F6-F9B7703E6265),
		helpstring("AccessNetwork Class")
	]
	coclass AccessNetwork
	{
		[default] interface IAccessNetwork;
	};
	[
		uuid(81618862-ED18-4860-AC33-43CE632BA252),
		helpstring("SearchRule Class")
	]
	coclass SearchRule
	{
		[default] interface ISearchRule;
	};
	[
		uuid(43C2359E-4550-4EA4-AEFD-78E973C5A006),
		helpstring("WebContentCheck Class")
	]
	coclass WebContentCheck
	{
		[default] interface IWebContentCheck;
	};
	[
		uuid(6723F6A6-5837-487A-B05E-1115B0EE6B55),
		helpstring("WebContentRecord Class")
	]
	coclass WebContentRecord
	{
		[default] interface IWebContentRecord;
	};
};
