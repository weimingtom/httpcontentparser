From: <ÓÉ Microsoft Internet Explorer 5 ±£´æ>
Subject: TinyXml: TinyXML++
Date: Fri, 12 Sep 2008 14:16:22 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01C914E2.22178160"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3198

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01C914E2.22178160
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://ticpp.googlecode.com/svn/docs/ticpp.html

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>TinyXml: TinyXML++</TITLE>
<META http-equiv=3DContent-Type =
content=3Dtext/html;charset=3DUTF-8><LINK=20
href=3D"http://ticpp.googlecode.com/svn/docs/doxygen.css" =
type=3Dtext/css=20
rel=3Dstylesheet><LINK =
href=3D"http://ticpp.googlecode.com/svn/docs/tabs.css"=20
type=3Dtext/css rel=3Dstylesheet>
<META content=3D"MSHTML 6.00.2900.3395" name=3DGENERATOR></HEAD>
<BODY><!-- Generated by Doxygen 1.5.3 -->
<DIV class=3Dtabs>
<UL>
  <LI><A=20
  =
href=3D"http://ticpp.googlecode.com/svn/docs/index.html"><SPAN>Main&nbsp;=
Page</SPAN></A>=20

  <LI><A=20
  =
href=3D"http://ticpp.googlecode.com/svn/docs/namespaces.html"><SPAN>Names=
paces</SPAN></A>=20

  <LI><A=20
  =
href=3D"http://ticpp.googlecode.com/svn/docs/annotated.html"><SPAN>Classe=
s</SPAN></A>=20

  <LI><A=20
  =
href=3D"http://ticpp.googlecode.com/svn/docs/files.html"><SPAN>Files</SPA=
N></A>=20
  <LI><A=20
  =
href=3D"http://ticpp.googlecode.com/svn/docs/pages.html"><SPAN>Related&nb=
sp;Pages</SPAN></A>=20
  </LI></UL></DIV>
<DIV class=3Dnav><A class=3Del=20
href=3D"http://ticpp.googlecode.com/svn/docs/index.html">index</A>&nbsp;=C2=
=BB&nbsp;<A=20
class=3Del=20
href=3D"http://ticpp.googlecode.com/svn/docs/ticppTutorial.html">TinyXML+=
+=20
Tutorial</A></DIV>
<H1><A class=3Danchor name=3Dticpp>TinyXML++</A></H1>
<H2>General Concepts </H2>
<P>The TinyXML++ classes are all wrappers around the corresponding =
classes=20
within TinyXML.
<P>There is no reason to create TinyXML++ objects on the heap, using=20
<CODE>new</CODE>, because the memory is managed for you. If you choose =
to use=20
<CODE>new</CODE> to create TinyXML++ objects, you will <B>always</B> =
need to use=20
<CODE>delete</CODE> to clean up.
<P>Basically, TinyXML++ objects are just wrappers around TinyXML =
pointers.
<P>
<H2>Goals </H2>
<P>
<UL>
  <LI>Simplify the use and interface of TinyXml, using C++ concepts.
  <UL>
    <LI>Use exceptions for error handling, so there are no return codes =
to check
    <LI>Use templates for automatic type conversion
    <LI>Use STL style iterators to move through nodes and=20
attributes</LI></UL></LI></UL>
<P>
<H2>Details </H2>
<P>
<H3>Use exceptions for error handling </H3>
<P>When using the original TinyXML, every function returns a value =
indicating=20
success or failure. A programmer would have to check that value to =
ensure the=20
function succeeded.
<P>Example:=20
<DIV class=3Dfragment><PRE class=3Dfragment> Load a document
<A class=3Dcode title=3D"Always the top level node." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlDocument.html">TiX=
mlDocument</A> doc( pFilename );
<SPAN class=3Dkeywordflow>if</SPAN> ( !doc.LoadFile() ) <SPAN =
class=3Dkeywordflow>return</SPAN>;

 Get a node
<A class=3Dcode title=3D"The element is a container class." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlElement.html">TiXm=
lElement</A>* pElem =3D doc.FirstChildElement();
<SPAN class=3Dkeywordflow>if</SPAN> ( !pElem ) <SPAN =
class=3Dkeywordflow>return</SPAN>;

 Get the node we want
pElem =3D pElem-&gt;NextSibling();
<SPAN class=3Dkeywordflow>if</SPAN> ( !pElem ) <SPAN =
class=3Dkeywordflow>return</SPAN>;

 <SPAN class=3Dkeywordflow>do</SPAN> something useful here
</PRE></DIV>
<P>An alternative was to use <A class=3Del=20
title=3D"A TiXmlHandle is a class that wraps a node pointer with null =
checks; this is an incredibly..."=20
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlHandle.html">TiXml=
Handle</A>,=20
which allows for function chaining by checking the intermediate function =
return=20
values:
<P>Example:=20
<DIV class=3Dfragment><PRE class=3Dfragment> Load a document
<A class=3Dcode title=3D"Always the top level node." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlDocument.html">TiX=
mlDocument</A> doc(pFilename);
<SPAN class=3Dkeywordflow>if</SPAN> (!doc.LoadFile()) <SPAN =
class=3Dkeywordflow>return</SPAN>;

 Make a document handle
<A class=3Dcode title=3D"A TiXmlHandle is a class that wraps a node =
pointer with null checks; this is an incredibly..." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlHandle.html">TiXml=
Handle</A> hDoc(&amp;doc);

 Get an element by <SPAN class=3Dkeyword>using</SPAN> the handle to =
chain calls
 Note the conversion of the <A class=3Dcode title=3D"A TiXmlHandle is a =
class that wraps a node pointer with null checks; this is an =
incredibly..." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlHandle.html">TiXml=
Handle</A> to the <A class=3Dcode title=3D"The element is a container =
class." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlElement.html">TiXm=
lElement</A>* - .Element()
<A class=3Dcode title=3D"The element is a container class." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlElement.html">TiXm=
lElement</A>* pElem =3D =
hDoc.FirstChildElement().NextSibling().Element();
<SPAN class=3Dkeywordflow>if</SPAN> ( !pElem ) <SPAN =
class=3Dkeywordflow>return</SPAN>;

 <SPAN class=3Dkeywordflow>do</SPAN> something useful here
</PRE></DIV>
<P>With TinyXML++, if there is an error during a function call, it =
throws an=20
exception. This means that a programmer can assume that every function =
is=20
successful, as long as the functions are enclosed in a try-catch block.
<P>Example:=20
<DIV class=3Dfragment><PRE class=3Dfragment><SPAN =
class=3Dkeywordflow>try</SPAN>
{
 Load a document
    <A class=3Dcode title=3D"Wrapper around TiXmlDocument." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Document.html"=
>ticpp::Document</A> doc( pFilename );
    doc.LoadFile();

 Get an element by chaining calls - no <SPAN =
class=3Dkeywordflow>return</SPAN> values to check, no <A class=3Dcode =
title=3D"A TiXmlHandle is a class that wraps a node pointer with null =
checks; this is an incredibly..." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlHandle.html">TiXml=
Handle</A>
    <A class=3Dcode title=3D"Wrapper around TiXmlElement." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Element.html">=
ticpp::Element</A>* pElem =3D doc.<A class=3Dcode title=3D"Convenience =
function to get through elements." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlNode.html#f4fb652f=
6bd79ae0d5ce7d0f7d3c0fba">FirstChildElement</A>()-&gt;<A class=3Dcode =
title=3D"STL std::string form." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlNode.html#1b94d2f7=
fa7ab25a5a8e8d4340c449c9">NextSibling</A>();

 <SPAN class=3Dkeywordflow>do</SPAN> something useful here
}
<SPAN class=3Dkeywordflow>catch</SPAN>( <A class=3Dcode title=3D"This is =
a ticpp exception class." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Exception.html=
">ticpp::Exception</A>&amp; ex )
{
 If any function has an error, execution will enter here.
 Report the error
    std::cout &lt;&lt; ex.<A class=3Dcode title=3D"Override =
std::exception::what() to return m_details." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Exception.html=
#eac1f13b96eb4e1f2a3659dc9080edd6">what</A>();
}
</PRE></DIV>
<P>
<H3>Use templates for automatic type conversion </H3>
<P>When using TinyXML, a programmer either needs to convert values to =
and from=20
strings, or choose from one of many overloads to get the value in the =
desired=20
type.
<P>Example:=20
<DIV class=3Dfragment><PRE class=3Dfragment> Load a document
<A class=3Dcode title=3D"Always the top level node." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlDocument.html">TiX=
mlDocument</A> doc( pFilename );
<SPAN class=3Dkeywordflow>if</SPAN> ( !doc.LoadFile() ) <SPAN =
class=3Dkeywordflow>return</SPAN>;

 Get a node
<A class=3Dcode title=3D"The element is a container class." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlElement.html">TiXm=
lElement</A>* pElem =3D doc.FirstChildElement();
<SPAN class=3Dkeywordflow>if</SPAN> ( !pElem ) <SPAN =
class=3Dkeywordflow>return</SPAN>;

 Get the node we want
pElem =3D pElem-&gt;NextSibling();
<SPAN class=3Dkeywordflow>if</SPAN> ( !pElem ) <SPAN =
class=3Dkeywordflow>return</SPAN>;

 Get the attribute as a string, convert to <SPAN =
class=3Dkeywordtype>int</SPAN>
<SPAN class=3Dkeyword>const</SPAN> <SPAN =
class=3Dkeywordtype>char</SPAN>* pszAttr =3D pElem-&gt;Attribute( <SPAN =
class=3Dstringliteral>"myAttribute"</SPAN> );
<SPAN class=3Dkeywordtype>int</SPAN> attr =3D atoi( pszAttr );

 Get the attribute as an <SPAN class=3Dkeywordtype>int</SPAN>
<SPAN class=3Dkeywordtype>int</SPAN> attr2;
<SPAN class=3Dkeywordflow>if</SPAN> ( TIXML_SUCCESS !=3D =
pElem-&gt;QueryIntAttribute( <SPAN =
class=3Dstringliteral>"myAttribute"</SPAN>, &amp;attr2 ) )
{
    <SPAN class=3Dkeywordflow>return</SPAN>;
}

 Get the attribute as a <SPAN class=3Dkeywordtype>double</SPAN>
<SPAN class=3Dkeywordtype>double</SPAN> attr3;
<SPAN class=3Dkeywordflow>if</SPAN> ( TIXML_SUCCESS !=3D =
pElem-&gt;QueryDoubleAttribute( <SPAN =
class=3Dstringliteral>"myAttribute"</SPAN>, &amp;attr3 ) )
{
    <SPAN class=3Dkeywordflow>return</SPAN>;
}

 Get the attribute as a <SPAN class=3Dkeywordtype>float</SPAN>
<SPAN class=3Dkeywordtype>float</SPAN> attr4;
<SPAN class=3Dkeywordflow>if</SPAN> ( TIXML_SUCCESS !=3D =
pElem-&gt;QueryFloatAttribute( <SPAN =
class=3Dstringliteral>"myAttribute"</SPAN>, &amp;attr4 ) )
{
    <SPAN class=3Dkeywordflow>return</SPAN>;
}
</PRE></DIV>
<P>TinyXML++ uses templates for automatic type conversion.
<P>Example:=20
<DIV class=3Dfragment><PRE class=3Dfragment><SPAN =
class=3Dkeywordflow>try</SPAN>
{
 Load a document
    <A class=3Dcode title=3D"Wrapper around TiXmlDocument." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Document.html"=
>ticpp::Document</A> doc( pFilename );
    doc.LoadFile();

 Get an element by chaining calls - no <SPAN =
class=3Dkeywordflow>return</SPAN> values to check, no <A class=3Dcode =
title=3D"A TiXmlHandle is a class that wraps a node pointer with null =
checks; this is an incredibly..." =
href=3D"http://ticpp.googlecode.com/svn/docs/classTiXmlHandle.html">TiXml=
Handle</A>
    <A class=3Dcode title=3D"Wrapper around TiXmlElement." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Element.html">=
ticpp::Element</A>* pElem =3D doc.FirstChildElement()-&gt;NextSibling();

 GetAttribute can determine the type of the pointer, and convert =
automatically

 Get the attribute as a <SPAN class=3Dkeywordtype>string</SPAN>
    std::string attr;
    pElem-&gt;GetAttribute( <SPAN =
class=3Dstringliteral>"myAttribute"</SPAN>, &amp;attr );

 Get the attribute as an <SPAN class=3Dkeywordtype>int</SPAN>
    <SPAN class=3Dkeywordtype>int</SPAN> attr2;
    pElem-&gt;GetAttribute( <SPAN =
class=3Dstringliteral>"myAttribute"</SPAN>, &amp;attr2 );

 Get the attribute as an <SPAN class=3Dkeywordtype>float</SPAN>
    <SPAN class=3Dkeywordtype>float</SPAN> attr3;
    pElem-&gt;GetAttribute( <SPAN =
class=3Dstringliteral>"myAttribute"</SPAN>, &amp;attr3 );

 Get the attribute as an <SPAN class=3Dkeywordtype>double</SPAN>
    <SPAN class=3Dkeywordtype>double</SPAN> attr4;
    pElem-&gt;GetAttribute( <SPAN =
class=3Dstringliteral>"myAttribute"</SPAN>, &amp;attr4 );

 Get the attribute as an <SPAN class=3Dkeywordtype>bool</SPAN>
    <SPAN class=3Dkeywordtype>bool</SPAN> attr5;
    pElem-&gt;GetAttribute( <SPAN =
class=3Dstringliteral>"myAttribute"</SPAN>, &amp;attr5 );

}
<SPAN class=3Dkeywordflow>catch</SPAN>( <A class=3Dcode title=3D"This is =
a ticpp exception class." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Exception.html=
">ticpp::Exception</A>&amp; ex )
{
 If any function has an error, execution will enter here.
 Report the error
    std::cout &lt;&lt; ex.<A class=3Dcode title=3D"Override =
std::exception::what() to return m_details." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Exception.html=
#eac1f13b96eb4e1f2a3659dc9080edd6">what</A>();
}
</PRE></DIV>
<H3>Use STL style iterators to move through nodes and attributes </H3>
<P>TinyXML has two ways to iterate:
<P>First Method:=20
<DIV class=3Dfragment><PRE class=3Dfragment>    <SPAN =
class=3Dkeywordflow>for</SPAN>( child =3D parent-&gt;FirstChild( <SPAN =
class=3Dkeyword>false</SPAN> ); child; child =3D child-&gt;NextSibling( =
<SPAN class=3Dkeyword>false</SPAN> ) )
</PRE></DIV>
<P>Second Method:=20
<DIV class=3Dfragment><PRE class=3Dfragment>    child =3D 0;
    <SPAN class=3Dkeywordflow>while</SPAN>( child =3D =
parent-&gt;IterateChildren( child ) )
</PRE></DIV>
<P>Although both methods work quite well, the syntax is not familiar. =
TinyXML++=20
introduces iterators:=20
<DIV class=3Dfragment><PRE class=3Dfragment><A class=3Dcode =
title=3D"Iterator for conveniently stepping through Nodes and =
Attributes." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Iterator.html"=
>ticpp::Iterator&lt; ticpp::Node &gt;</A> child;
<SPAN class=3Dkeywordflow>for</SPAN> ( child =3D child.<A class=3Dcode =
title=3D"For for loop comparisons." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Iterator.html#=
056e73d1bed641f43114b9d4e9f0f29e">begin</A>( parent ); child !=3D =
child.<A class=3Dcode title=3D"For for loop comparisons." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Iterator.html#=
7b4a49c16cff8c8470cc5c9a63810cd5">end</A>(); child++ )
</PRE></DIV>
<P>Iterators have the added advantage of filtering by type:=20
<DIV class=3Dfragment><PRE class=3Dfragment> Only iterates through =
Comment nodes
<A class=3Dcode title=3D"Iterator for conveniently stepping through =
Nodes and Attributes." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Iterator.html"=
>ticpp::Iterator&lt; ticpp::Comment &gt;</A> child;
<SPAN class=3Dkeywordflow>for</SPAN> ( child =3D child.begin( parent ); =
child !=3D child.end(); child++ )
</PRE></DIV>
<P>
<DIV class=3Dfragment><PRE class=3Dfragment> Only iterates through =
Element nodes with value <SPAN =
class=3Dstringliteral>"ElementValue"</SPAN>
<A class=3Dcode title=3D"Iterator for conveniently stepping through =
Nodes and Attributes." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Iterator.html"=
>ticpp::Iterator&lt; ticpp::Element &gt;</A> child( <SPAN =
class=3Dstringliteral>"ElementValue"</SPAN> );
<SPAN class=3Dkeywordflow>for</SPAN> ( child =3D child.begin( parent ); =
child !=3D child.end(); child++ )
</PRE></DIV>
<P>Finally, Iterators also work with Attributes=20
<DIV class=3Dfragment><PRE class=3Dfragment><A class=3Dcode =
title=3D"Iterator for conveniently stepping through Nodes and =
Attributes." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Iterator.html"=
>ticpp::Iterator&lt; ticpp::Attribute &gt;</A> attribute;
<SPAN class=3Dkeywordflow>for</SPAN> ( attribute =3D attribute.<A =
class=3Dcode title=3D"For for loop comparisons." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Iterator.html#=
056e73d1bed641f43114b9d4e9f0f29e">begin</A>( element ); attribute !=3D =
attribute.<A class=3Dcode title=3D"For for loop comparisons." =
href=3D"http://ticpp.googlecode.com/svn/docs/classticpp_1_1Iterator.html#=
7b4a49c16cff8c8470cc5c9a63810cd5">end</A>(); attribute++ )
</PRE></DIV>
<HR SIZE=3D1>

<ADDRESS style=3D"TEXT-ALIGN: right"><SMALL>Generated on Tue Oct 2 =
10:39:49 2007=20
for TinyXml by&nbsp; <A href=3D"http://www.doxygen.org/index.html"><IMG=20
alt=3Ddoxygen src=3D"http://ticpp.googlecode.com/svn/docs/doxygen.png" =
align=3Dmiddle=20
border=3D0></A> 1.5.3 </SMALL></ADDRESS></BODY></HTML>

------=_NextPart_000_0000_01C914E2.22178160
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://ticpp.googlecode.com/svn/docs/doxygen.png

iVBORw0KGgoAAAANSUhEUgAAAGQAAAAtCAMAAABvaz7CAAAABGdBTUEAANbY1E9YMgAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAABdUExURQAAAMe+zyImqcjO77a71tPa+pOi
3qCs4LbC9X+Hp9XZ6snKzuHi5nuO1I2h64iZ16Cy+KesucDAsd3dzvn56fX15+vr5UVEOdfWy2hn
XR8dE19YPEA6I21oVf///93AfzEAAAAfdFJOU///////////////////////////////////////
/wDNGXYQAAAD/0lEQVR42mKQQwAGCJCjOgAIIGQjGYSEhYWFaGAJQAChWCIsKioqTANLAAKILpYA
BBBdLAEIILpYAhBAdLEEIIDoYglAANHFEoAAQrVEhDaWAAQQmiUiIrSwBCCAGJALFJglDAyIEgaZ
QhQ6SKKIsgjBZkCVAAggiFJQeQIEIhBLYFxQEQNiQyghSQZJIWipAxGF64MogfGEkMQh6gECiAGs
QwQBhBnEheBsITBbWFxKXBgkA1QIDk0GiCiSPmEGJFOEGJAMBNkCEEAM0KhAUi4kgqwETEpCAlIY
oolBEMwQRzEKrAsWGMIoRsgBBBCDHNRQaGjBVMADD6IZhCUhHmCAJhBxsCUQdcIMUAcguQaiC6wB
IIAYILlDVAgYJEKi4HyCwgW6VxQChKQYwGygoyESQmBSBiQoDBYDhRnECIiRksIQnhxAAEHFJcQZ
GKTEJUAsBiiXAcoVgtoBEgKxJSTB4uJSElBtQiBVYDFJiFlCDAgVIDk5gABcjTECACAIAnlDQxJD
/39mIltOoCcA3D1UR8iS+GwFOJheS/s1jzzqElOB5lLJpJQl7hNAQAEeIOAGm8oNYjGgccVBFA+P
EFhIiAcCuIEmgdhCklIgeQkGbpgEUIQBzOOWAhsANEEOIICAarmAgBscPtwgFgOYC3QhmCsoLsjF
BVcBUQISBrFBMtzcEE0QVdyCkpKCguIMYDGgJWAxBjmAAAJGPAszEAgCY1oQxGAB8wVlIVwWiCBE
BcgrEC4LODOLs8DkuCFsFllZQSAtCDaCRUqKBaJWDiCAQKmeAwRYWFggNIQP5QrKQDgQNtBgGQgT
UmQIQrSANEkJIhQC3QkigZZAeHIAAQTKjIIcSICdQRrKEhAQYJdmBwnJyLBDjAYGIlgAVjDJCLKz
QwxiQDKFnQGsSAqsFsiTAwggcCkhKAAH7IIgnTCONAOIKSglBVLBzgm2BCSAVADKgKXA/mKHGwFi
gSwBcxnkAALQQAY3AMAgCPzRsILS7j9mpdaXXFBJeCFJtA+mIpSNyIiSM6gKUVmY/3SBXl7b2Gd2
LSB9PlcAgUpPQVYEYAQDJCYjlAWmBBk4+fj4OBmAXEZGIJtTRkoGJMLGgNDGitAPoRjkAAKIgYGJ
FMDACzQSqoUByOTlBQkALcGnhwEggBhIsoWBl5+fnxdmCT8c8OI1hAEggBiQazHCAGSJLIzDCbOD
k4AugAAirUYHmcvLgODxgr3BScgQgAAisdkANBfJSKBneIF8gmYABBCpbRMpKSk5tC4NYU0AAUSD
BhAmAAggulgCEEB0sQQggOhiCUAA0cUSgACiiyUAAUQXSwACiC6WAAQQXSwBCCC6WAIQQHSxBCCA
6GIJQIABAGRggsm9U7VPAAAAAElFTkSuQmCC

------=_NextPart_000_0000_01C914E2.22178160
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://ticpp.googlecode.com/svn/docs/doxygen.css

BODY {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H1 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H2 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H3 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H4 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H5 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
H6 {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
P {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
CENTER {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
TD {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
TH {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
UL {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
DL {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
DIV {
	FONT-FAMILY: Geneva, Arial, Helvetica, sans-serif
}
BODY {
	FONT-SIZE: 90%
}
TD {
	FONT-SIZE: 90%
}
H1 {
	FONT-SIZE: 160%; TEXT-ALIGN: center
}
H2 {
	FONT-SIZE: 120%
}
H3 {
	FONT-SIZE: 100%
}
CAPTION {
	FONT-WEIGHT: bold
}
DIV.qindex {
	BORDER-RIGHT: #84b0c7 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#84b0c7 1px solid; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; MARGIN: 2px; =
BORDER-LEFT: #84b0c7 1px solid; WIDTH: 100%; LINE-HEIGHT: 140%; =
PADDING-TOP: 2px; BORDER-BOTTOM: #84b0c7 1px solid; BACKGROUND-COLOR: =
#e8eef2; TEXT-ALIGN: center
}
DIV.nav {
	BORDER-RIGHT: #84b0c7 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#84b0c7 1px solid; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; MARGIN: 2px; =
BORDER-LEFT: #84b0c7 1px solid; WIDTH: 100%; LINE-HEIGHT: 140%; =
PADDING-TOP: 2px; BORDER-BOTTOM: #84b0c7 1px solid; BACKGROUND-COLOR: =
#e8eef2; TEXT-ALIGN: center
}
DIV.navtab {
	BORDER-RIGHT: #84b0c7 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#84b0c7 1px solid; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; MARGIN: 2px =
15px 2px 2px; BORDER-LEFT: #84b0c7 1px solid; PADDING-TOP: 2px; =
BORDER-BOTTOM: #84b0c7 1px solid; BACKGROUND-COLOR: #e8eef2; TEXT-ALIGN: =
center
}
TD.navtab {
	FONT-SIZE: 70%
}
A.qindex {
	FONT-WEIGHT: bold; COLOR: #1a419d; TEXT-DECORATION: none
}
A.qindex:visited {
	FONT-WEIGHT: bold; COLOR: #1a419d; TEXT-DECORATION: none
}
A.qindex:hover {
	BACKGROUND-COLOR: #ddddff; TEXT-DECORATION: none
}
A.qindexHL {
	BORDER-RIGHT: #9295c2 1px double; BORDER-TOP: #9295c2 1px double; =
FONT-WEIGHT: bold; BORDER-LEFT: #9295c2 1px double; COLOR: #ffffff; =
BORDER-BOTTOM: #9295c2 1px double; BACKGROUND-COLOR: #6666cc; =
TEXT-DECORATION: none
}
A.qindexHL:hover {
	COLOR: #ffffff; BACKGROUND-COLOR: #6666cc; TEXT-DECORATION: none
}
A.qindexHL:visited {
	COLOR: #ffffff; BACKGROUND-COLOR: #6666cc; TEXT-DECORATION: none
}
A.el {
	FONT-WEIGHT: bold; TEXT-DECORATION: none
}
A.elRef {
	FONT-WEIGHT: bold
}
A.code:link {
	FONT-WEIGHT: normal; COLOR: #0000ff; TEXT-DECORATION: none
}
A.code:visited {
	FONT-WEIGHT: normal; COLOR: #0000ff; TEXT-DECORATION: none
}
A.codeRef:link {
	FONT-WEIGHT: normal; COLOR: #0000ff
}
A.codeRef:visited {
	FONT-WEIGHT: normal; COLOR: #0000ff
}
A:hover {
	BACKGROUND-COLOR: #f2f2ff; TEXT-DECORATION: none
}
DL.el {
	MARGIN-LEFT: -1cm
}
.fragment {
	FONT-SIZE: 95%; FONT-FAMILY: monospace, fixed
}
PRE.fragment {
	BORDER-RIGHT: #cccccc 1px solid; PADDING-RIGHT: 6px; BORDER-TOP: =
#cccccc 1px solid; PADDING-LEFT: 6px; PADDING-BOTTOM: 4px; MARGIN: 4px =
8px 4px 2px; BORDER-LEFT: #cccccc 1px solid; PADDING-TOP: 4px; =
BORDER-BOTTOM: #cccccc 1px solid; BACKGROUND-COLOR: #f5f5f5
}
DIV.ah {
	MARGIN-TOP: 3px; FONT-WEIGHT: bold; MARGIN-BOTTOM: 3px; COLOR: #ffffff; =
BACKGROUND-COLOR: black
}
DIV.groupHeader {
	MARGIN-TOP: 12px; FONT-WEIGHT: bold; MARGIN-BOTTOM: 6px; MARGIN-LEFT: =
16px
}
DIV.groupText {
	FONT-SIZE: 90%; MARGIN-LEFT: 16px; FONT-STYLE: italic
}
BODY {
	BACKGROUND: white; MARGIN-LEFT: 20px; COLOR: black; MARGIN-RIGHT: 20px
}
TD.indexkey {
	BORDER-RIGHT: #cccccc 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: =
#cccccc 1px solid; PADDING-LEFT: 10px; FONT-WEIGHT: bold; =
PADDING-BOTTOM: 2px; MARGIN: 2px 0px; BORDER-LEFT: #cccccc 1px solid; =
PADDING-TOP: 2px; BORDER-BOTTOM: #cccccc 1px solid; BACKGROUND-COLOR: =
#e8eef2
}
TD.indexvalue {
	BORDER-RIGHT: #cccccc 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: =
#cccccc 1px solid; PADDING-LEFT: 10px; PADDING-BOTTOM: 2px; MARGIN: 2px =
0px; BORDER-LEFT: #cccccc 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: =
#cccccc 1px solid; FONT-STYLE: italic; BACKGROUND-COLOR: #e8eef2
}
TR.memlist {
	BACKGROUND-COLOR: #f0f0f0
}
P.formulaDsp {
	TEXT-ALIGN: center
}
IMG.formulaDsp {
=09
}
IMG.formulaInl {
	VERTICAL-ALIGN: middle
}
SPAN.keyword {
	COLOR: #008000
}
SPAN.keywordtype {
	COLOR: #604020
}
SPAN.keywordflow {
	COLOR: #e08000
}
SPAN.comment {
	COLOR: #800000
}
SPAN.preprocessor {
	COLOR: #806020
}
SPAN.stringliteral {
	COLOR: #002080
}
SPAN.charliteral {
	COLOR: #008080
}
.mdescLeft {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 8px; BORDER-TOP: #e0e0e0 1px; =
PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 4px; MARGIN: 0px; =
BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 0px; BORDER-BOTTOM: #e0e0e0 1px; =
FONT-STYLE: italic; BACKGROUND-COLOR: #fafafa
}
.mdescRight {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 8px; BORDER-TOP: #e0e0e0 1px; =
PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 4px; MARGIN: 0px; =
BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 0px; BORDER-BOTTOM: #e0e0e0 1px; =
FONT-STYLE: italic; BACKGROUND-COLOR: #fafafa
}
.memItemLeft {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 0px; BORDER-TOP: #e0e0e0 1px =
solid; PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 0px; MARGIN: =
4px; BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 1px; BORDER-BOTTOM: #e0e0e0 =
1px; BACKGROUND-COLOR: #fafafa
}
.memItemRight {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 8px; BORDER-TOP: #e0e0e0 1px =
solid; PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 0px; MARGIN: =
4px; BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 1px; BORDER-BOTTOM: #e0e0e0 =
1px; BACKGROUND-COLOR: #fafafa
}
.memTemplItemLeft {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 0px; BORDER-TOP: #e0e0e0 1px; =
PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 0px; MARGIN: 4px; =
BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 1px; BORDER-BOTTOM: #e0e0e0 1px; =
BACKGROUND-COLOR: #fafafa
}
.memTemplItemRight {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 8px; BORDER-TOP: #e0e0e0 1px; =
PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 0px; MARGIN: 4px; =
BORDER-LEFT: #e0e0e0 1px; PADDING-TOP: 1px; BORDER-BOTTOM: #e0e0e0 1px; =
BACKGROUND-COLOR: #fafafa
}
.memTemplParams {
	BORDER-RIGHT: #e0e0e0 1px; PADDING-RIGHT: 0px; BORDER-TOP: #e0e0e0 1px =
solid; PADDING-LEFT: 8px; FONT-SIZE: 80%; PADDING-BOTTOM: 0px; MARGIN: =
4px; BORDER-LEFT: #e0e0e0 1px; COLOR: #606060; PADDING-TOP: 1px; =
BORDER-BOTTOM: #e0e0e0 1px; BACKGROUND-COLOR: #fafafa
}
.search {
	FONT-WEIGHT: bold; COLOR: #003399
}
FORM.search {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
INPUT.search {
	FONT-WEIGHT: normal; FONT-SIZE: 75%; COLOR: #000080; BACKGROUND-COLOR: =
#e8eef2
}
TD.tiny {
	FONT-SIZE: 75%
}
A {
	COLOR: #1a41a8
}
A:visited {
	COLOR: #2a3798
}
.dirtab {
	BORDER-RIGHT: #84b0c7 1px solid; PADDING-RIGHT: 4px; BORDER-TOP: =
#84b0c7 1px solid; PADDING-LEFT: 4px; PADDING-BOTTOM: 4px; BORDER-LEFT: =
#84b0c7 1px solid; PADDING-TOP: 4px; BORDER-BOTTOM: #84b0c7 1px solid; =
BORDER-COLLAPSE: collapse
}
TH.dirtab {
	FONT-WEIGHT: bold; BACKGROUND: #e8eef2
}
HR {
	BORDER-RIGHT: medium none; BORDER-TOP: black 1px solid; BORDER-LEFT: =
medium none; BORDER-BOTTOM: medium none; HEIGHT: 1px
}
.memtemplate {
	FONT-WEIGHT: normal; FONT-SIZE: 80%; COLOR: #606060
}
.memnav {
	BORDER-RIGHT: #84b0c7 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: =
#84b0c7 1px solid; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; MARGIN: 2px =
15px 2px 2px; BORDER-LEFT: #84b0c7 1px solid; PADDING-TOP: 2px; =
BORDER-BOTTOM: #84b0c7 1px solid; BACKGROUND-COLOR: #e8eef2; TEXT-ALIGN: =
center
}
.memitem {
	BORDER-RIGHT: #dedeee 1px solid; PADDING-RIGHT: 4px; BORDER-TOP: =
#dedeee 1px solid; PADDING-LEFT: 4px; PADDING-BOTTOM: 4px; BORDER-LEFT: =
#dedeee 1px solid; PADDING-TOP: 4px; BORDER-BOTTOM: #dedeee 1px solid; =
BACKGROUND-COLOR: #eef3f5; moz-border-radius: 8px 8px 8px 8px
}
.memname {
	FONT-WEIGHT: bold; WHITE-SPACE: nowrap
}
.memdoc {
	PADDING-LEFT: 10px
}
.memproto {
	BORDER-RIGHT: #84b0c7 1px solid; BORDER-TOP: #84b0c7 1px solid; =
FONT-WEIGHT: bold; BORDER-LEFT: #84b0c7 1px solid; WIDTH: 100%; =
BORDER-BOTTOM: #84b0c7 1px solid; BACKGROUND-COLOR: #d5e1e8; =
moz-border-radius: 8px 8px 8px 8px
}
.paramkey {
	TEXT-ALIGN: right
}
.paramtype {
	WHITE-SPACE: nowrap
}
.paramname {
	COLOR: #602020; FONT-STYLE: italic; WHITE-SPACE: nowrap
}
.ftvtree {
	MARGIN: 0.5em; FONT-FAMILY: sans-serif
}
.directory {
	FONT-WEIGHT: bold; FONT-SIZE: 9pt
}
.directory H3 {
	FONT-SIZE: 11pt; MARGIN: 1em 0px 0px
}
UNKNOWN {
	MARGIN-TOP: 0px
}
.directory P {
	MARGIN: 0px; WHITE-SPACE: nowrap
}
.directory DIV {
	DISPLAY: none; MARGIN: 0px
}
.directory IMG {
	VERTICAL-ALIGN: -30%
}

------=_NextPart_000_0000_01C914E2.22178160
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://ticpp.googlecode.com/svn/docs/tabs.css

DIV.tabs {
	BACKGROUND: url(tab_b.gif) repeat-x 50% bottom; FLOAT: left; =
MARGIN-BOTTOM: 4px; WIDTH: 100%
}
DIV.tabs UL {
	PADDING-LEFT: 10px; MARGIN: 0px; LIST-STYLE-TYPE: none
}
DIV.tabs LI {
	PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; PADDING-BOTTOM: =
0px; MARGIN: 0px; PADDING-TOP: 0px
}
DIV.tabs FORM {
	PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; PADDING-BOTTOM: =
0px; MARGIN: 0px; PADDING-TOP: 0px
}
DIV.tabs FORM {
	FLOAT: right
}
DIV.tabs A {
	FONT-WEIGHT: bold; FONT-SIZE: x-small; BACKGROUND: url(tab_r.gif) =
no-repeat right top; FLOAT: left; BORDER-BOTTOM: #84b0c7 1px solid; =
TEXT-DECORATION: none
}
DIV.tabs A:hover {
	BACKGROUND-POSITION: 100% -150px
}
DIV.tabs A:link {
	COLOR: #1a419d
}
DIV.tabs A:visited {
	COLOR: #1a419d
}
DIV.tabs A:active {
	COLOR: #1a419d
}
DIV.tabs A:hover {
	COLOR: #1a419d
}
DIV.tabs SPAN {
	PADDING-RIGHT: 9px; DISPLAY: block; PADDING-LEFT: 9px; BACKGROUND: =
url(tab_l.gif) no-repeat left top; FLOAT: left; PADDING-BOTTOM: 5px; =
PADDING-TOP: 5px; WHITE-SPACE: nowrap
}
DIV.tabs INPUT {
	DISPLAY: inline; FONT-SIZE: 1em; FLOAT: right
}
DIV.tabs TD {
	FONT-WEIGHT: bold; FONT-SIZE: x-small; TEXT-DECORATION: none
}
DIV.tabs SPAN {
	FLOAT: none
}
DIV.tabs A:hover SPAN {
	BACKGROUND-POSITION: 0% -150px
}
DIV.tabs LI.current A {
	BORDER-TOP-WIDTH: 0px; BACKGROUND-POSITION: 100% -150px; =
BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-RIGHT-WIDTH: =
0px
}
DIV.tabs LI.current SPAN {
	BACKGROUND-POSITION: 0% -150px; PADDING-BOTTOM: 6px
}
DIV.nav {
	BORDER-RIGHT: medium none; BORDER-TOP: medium none; BACKGROUND: none =
transparent scroll repeat 0% 0%; BORDER-LEFT: medium none; =
BORDER-BOTTOM: #84b0c7 1px solid
}

------=_NextPart_000_0000_01C914E2.22178160--
